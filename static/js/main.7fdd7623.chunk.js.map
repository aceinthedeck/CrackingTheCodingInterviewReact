{"version":3,"sources":["components/UI/question.js","components/chapter1/question1.js","components/UI/header.js","components/UI/sidebar.js","components/chapter1/checkPermutation.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","react_default","a","createElement","chapter","question","Question1","state","message","onTextChange","e","_this","isUnique","target","value","setState","text","charSet","Array","fill","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","charCode","charCodeAt","err","return","code","String","raw","_templateObject","type","placeholder","className","onChange","this","Component","Header","href","SideBar","react_router_dom","to","CheckPermutation","App","header","sidebar","role","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fdd7623.chunk.js","sourcesContent":["import React from 'react';\n\nconst Question = (props) => {\n\n    return(\n        <div>\n            <h3>{props.chapter}</h3>\n            <h4>{props.question}</h4>\n        </div>\n    );\n\n}\n\nexport default Question;","import React, { Component } from 'react';\nimport Question from '../UI/question';\n\nclass Question1 extends Component{\n\n    state = {\n        message: null\n    }\n\n    onTextChange =(e) => {\n\n        var value = this.isUnique(e.target.value);\n\n        if(value===true){\n            this.setState({\n                message: \"String has all unique characters\"\n            });\n        }\n        else {\n            this.setState({\n                message: \"String has duplicate characters\"\n            });\n        }\n    }\n\n    isUnique = (text) => {\n\n        let charSet = Array(128).fill(false);\n        if(text.length>128){\n            return false;\n        }\n\n        for(const char of text){\n            let charCode = char.charCodeAt(0);\n            if(charSet[charCode]===true){\n                return false;\n            }\n            else{\n                charSet[charCode] = true;\n            }\n        }\n        return true;\n    }\n\n    render(){\n\n        const code = String.raw`\n            isUnique = (text) => {\n\n            let charSet = Array(128).fill(false);\n            if(text.length>128){\n                return false;\n            }\n    \n            for(const char of text){\n                let charCode = char.charCodeAt(0);\n                if(charSet[charCode]===true){\n                    return false;\n                }\n                else{\n                    charSet[charCode] = true;\n                }\n            }\n            return true;\n            }`;\n\n        return(\n            <div>\n                <Question chapter=\"Chapter 1\"\n                question=\"Implement an algorithm to determine if a string has all unique characters. \n                What if you cannot use additional data structures?\"/> \n                <input type=\"text\" \n                placeholder=\"Type a string to test\"\n                className=\"form-control\"\n                 onChange={this.onTextChange}></input>\n\n                {\n                    this.state.message && \n                    <div className=\"alert alert-primary\">\n                        {this.state.message}\n                    </div>\n                }\n                <h3>Code:</h3>\n                <div className=\"p-3 mb-2 bg-dark\">\n                   <pre className=\"text-white\">{code}</pre>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Question1;","import React from 'react';\n\nconst Header = () => {\n\n    return(\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n            <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/\">Cracking the coding interview</a>\n        </nav>\n    );\n\n}\n\nexport default Header;","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\n\nconst SideBar = () => {\n\n    return(\n        <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\n            <div className=\"sidebar-sticky\">\n                <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted\">\n                    <span>Chapter 1</span>\n                </h6>\n                <ul className=\"nav flex-column\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link active\" to=\"/isunique\">\n                            Is Unique\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/checkpermutation\">\n                            Check Permutation\n                        </Link>\n                    </li>\n                </ul>\n        <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted\">\n          <span>Chapter 2</span>\n        </h6>\n        <ul className=\"nav flex-column mb-2\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\">\n                Is Unique\n            </Link>\n          </li>\n        </ul>\n      </div>\n        </nav>\n    );\n\n}\n\nexport default SideBar;","import React, { Component } from 'react';\nimport Question from '../UI/question';\n\nclass CheckPermutation extends Component {\n\n    render(){\n\n        return(\n            <div>\n                <Question chapter=\"Chapter 1\"\n                 question=\"Given two strings, write a method to decide if one is a permutation of the other\"\n                />\n                 <input type=\"text\" \n                placeholder=\"Type a string to test\"\n                className=\"form-control\"\n                 onChange={this.onTextChange}></input>\n                  <input type=\"text\" \n                placeholder=\"Type a string to test\"\n                className=\"form-control\"\n                 onChange={this.onTextChange}></input>\n            </div>);\n    }\n}\n\nexport default CheckPermutation;","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Question1 from './components/chapter1/question1';\nimport Header from './components/UI/header';\nimport SideBar from './components/UI/sidebar';\nimport CheckPermutation from './components/chapter1/checkPermutation';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n      <div>\n        <Header/>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <SideBar/>\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\n              <Route path=\"/\" exact component={CheckPermutation} />\n              <Route path=\"/isunique/\" component={Question1}/>\n              <Route path=\"/checkpermutation/\" component={CheckPermutation} />\n            </main>\n          </div>\n        </div>\n        \n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}