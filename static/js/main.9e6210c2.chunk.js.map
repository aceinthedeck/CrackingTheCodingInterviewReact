{"version":3,"sources":["components/UI/question.js","components/UI/code.js","components/chapter1/question1.js","components/UI/header.js","components/UI/sidebar.js","components/chapter1/checkPermutation.js","components/chapter1/urlify.js","components/chapter1/palindromePermutation.js","components/chapter1/oneWay.js","components/chapter1/stringCompression.js","components/chapter1/rotateMatrix.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","react_default","a","createElement","chapter","question","Code","className","code","Question1","state","message","onTextChange","e","_this","isUnique","target","value","setState","text","charSet","Array","fill","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","charCode","charCodeAt","err","return","String","raw","_templateObject","class","type","placeholder","onChange","this","UI_code","Component","Header","href","SideBar","react_router_dom","to","CheckPermutation","string1","string2","successMessage","errorMessage","onString1Change","checkPermutation","onString2Change","charCount","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","checkPermutation_templateObject","URLify","output","urlify","trimEnd","c","urlify_templateObject","PalindromePermutation","palindromePermutation","toLowerCase","charMap","checkOdd","key","palindromePermutation_templateObject","OneWay","oneWay","string1Length","string2Length","oneEditReplace","oneEditInsert","foundDiff","i","j","oneWay_templateObject","StringCompression","string","compressedString","ontextChange","compressString","outputString","tempCount","stringCompression_templateObject","RotateMatrix","imageArray","onAntiClockWiseClick","rotateAntiClockWise","onClockWiseClick","rotateClockWise","array","rows","col","newArray","rotateMatrix_templateObject","map","row","index","cell","onClick","App","header","sidebar","role","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e6210c2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Question = (props) => {\n\n    return(\n        <div>\n            <h3>{props.chapter}</h3>\n            <hr/>\n            <h5>{props.question}</h5>\n        </div>\n    );\n\n}\n\nexport default Question;","import React from 'react';\n\nconst Code = (props) => {\n\n    return(\n        <div>\n            <h3>Code:</h3>\n                <div className=\"p-3 mb-2 bg-dark\">\n                   <pre className=\"text-white\">{props.code}</pre>\n                </div>\n        </div>\n    );\n}\n\nexport default Code;","import React, { Component } from 'react';\nimport Question from '../UI/question';\nimport Code from '../UI/code';\n\nclass Question1 extends Component{\n\n    state = {\n        message: null\n    }\n\n    onTextChange =(e) => {\n\n        var value = this.isUnique(e.target.value);\n\n        if(value===true){\n            this.setState({\n                message: \"String has all unique characters\"\n            });\n        }\n        else {\n            this.setState({\n                message: \"String has duplicate characters\"\n            });\n        }\n    }\n\n    isUnique = (text) => {\n\n        let charSet = Array(128).fill(false);\n        if(text.length>128){\n            return false;\n        }\n\n        for(const char of text){\n            let charCode = char.charCodeAt(0);\n            if(charSet[charCode]===true){\n                return false;\n            }\n            else{\n                charSet[charCode] = true;\n            }\n        }\n        return true;\n    }\n\n    render(){\n\n        const code = String.raw`\n            isUnique = (text) => {\n\n            let charSet = Array(128).fill(false);\n            if(text.length>128){\n                return false;\n            }\n    \n            for(const char of text){\n                let charCode = char.charCodeAt(0);\n                if(charSet[charCode]===true){\n                    return false;\n                }\n                else{\n                    charSet[charCode] = true;\n                }\n            }\n            return true;\n            }`;\n\n        return(\n            <div>\n                <Question chapter=\"Chapter 1 - Is Unique\"\n                question=\"Implement an algorithm to determine if a string has all unique characters. \n                What if you cannot use additional data structures?\"/> \n                <div class=\"form-group\">\n                <input type=\"text\" placeholder=\"Type a string to test\"\n                className=\"form-control\"\n                 onChange={this.onTextChange}></input>\n                 </div>\n\n                {\n                    this.state.message && \n                    <div className=\"alert alert-primary\">\n                        {this.state.message}\n                    </div>\n                }\n                <Code code={code}/>\n\n            </div>\n        )\n    }\n}\n\nexport default Question1;","import React from 'react';\n\nconst Header = () => {\n\n    return(\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n            <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/\">Cracking the coding interview</a>\n        </nav>\n    );\n\n}\n\nexport default Header;","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\n\nconst SideBar = () => {\n\n    return(\n        <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\n            <div className=\"sidebar-sticky\">\n                <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted\">\n                    <span>Chapter 1</span>\n                </h6>\n                <ul className=\"nav flex-column\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link active\" to=\"/isunique\">\n                            Is Unique\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/checkpermutation\">\n                            Check Permutation\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/urlify\">\n                            URLify\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/palindromepermutation\">\n                            Palrindrome Permutation\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/oneway\">\n                            One Way\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/stringcompression\">\n                            String Compression\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/rotatematrix\">\n                            Rotate Matrix\n                        </Link>\n                    </li>\n\n                </ul>\n        <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted\">\n          <span>Chapter 2</span>\n        </h6>\n        <ul className=\"nav flex-column mb-2\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\">\n                Is Unique\n            </Link>\n          </li>\n        </ul>\n      </div>\n        </nav>\n    );\n\n}\n\nexport default SideBar;","import React, { Component } from 'react';\nimport Question from '../UI/question';\nimport Code from '../UI/code';\n\nclass CheckPermutation extends Component {\n\n    state = {\n        string1: \"\",\n        string2: \"\",\n        message:\"\"\n    }\n\n    successMessage = \"Two strings are permutation of each other\";\n    errorMessage = \"Two strings are not permutations of each other\";\n\n    onString1Change = (e) => {\n\n        let string1 = e.target.value;\n\n        this.setState({\n            string1: string1\n        });\n        let result = this.checkPermutation(string1, this.state.string2);\n\n        if(result === true){\n            this.setState({\n                message: this.successMessage\n            })\n        }\n        else {\n            this.setState({\n                message: this.errorMessage\n            })\n        }\n\n    }\n\n    onString2Change = (e) => {\n\n        let string2 = e.target.value;\n\n        this.setState({\n            string2: string2\n        });\n        let result = this.checkPermutation(this.state.string1, string2);\n\n        if(result === true){\n            this.setState({\n                message: this.successMessage\n            })\n        }\n        else {\n            this.setState({\n                message: this.errorMessage\n            })\n        }\n\n    }\n\n    checkPermutation = (string1, string2) => {\n\n        let charCount = Array(128).fill(0);\n        \n        if(string1.length !== string2.length)\n        {\n            return false;\n        }\n\n        for(const char of string1){\n            let charCode = char.charCodeAt(0);\n            charCount[charCode] +=1;\n        }\n\n        for(const char of string2) {\n            let charCode = char.charCodeAt(0);\n            charCount[charCode] -=1;\n            if(charCount[charCode]<0){\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    render(){\n\n        const code = String.raw`\n        checkPermutation = (string1, string2) => {\n\n            let charCount = Array(128).fill(0);\n            \n            if(string1.length !== string2.length)\n            {\n                return false;\n            }\n    \n            for(const char of string1){\n                let charCode = char.charCodeAt(0);\n                charCount[charCode] +=1;\n            }\n    \n            for(const char of string2) {\n                let charCode = char.charCodeAt(0);\n                charCount[charCode] -=1;\n                if(charCount[charCode]<0){\n                    return false;\n                }\n            }\n    \n            return true;\n        }\n        `;\n\n        return(\n            <div>\n                <Question chapter=\"Chapter 1 - Check Permutation\"\n                 question=\"Given two strings, write a method to decide if one is a permutation of the other\"\n                />\n                {\n                    this.state.message && \n                    <div className=\"alert alert-primary\">\n                        {this.state.message}\n                    </div>\n                }\n                 <div class=\"form-group\">\n                 <input type=\"text\" placeholder=\"Type a string to test\"\n                        className=\"form-control\"\n                        value={this.state.string1}\n                        onChange={this.onString1Change}></input>\n                 </div>\n                 <div class=\"form-group\">\n                  <input type=\"text\" placeholder=\"Type a string to test\"\n                        className=\"form-control\"\n                        value={this.state.string2}\n                        onChange={this.onString2Change}></input>\n                 </div>\n                 <Code code={code}/>\n            </div>);\n    }\n}\n\nexport default CheckPermutation;","import React, { Component } from 'react';\nimport Question from '../UI/question';\nimport Code from '../UI/code';\n\n\nclass URLify extends Component {\n\n    state ={\n        output:\"\"\n    }\n\n    onTextChange = (e) => {\n\n        this.setState({\n            output: this.urlify(e.target.value)\n        })\n\n    }\n\n    urlify = (text) => {\n        \n        let output=\"\";\n        text = text.trimEnd();\n        for(const c of text){\n\n            if(c===\" \"){\n                output+='%20';\n            }\n            else{\n                output+=c;\n            }\n        }\n        return output;\n    }\n\n    render(){\n\n        const code = String.raw`\n        urlify = (text) => {\n        \n            let output=\"\";\n            text = text.trimEnd();\n            for(const c of text){\n    \n                if(c===\" \"){\n                    output+='%20';\n                }\n                else{\n                    output+=c;\n                }\n            }\n            return output;\n        }\n        `;\n        return(\n            <div>\n                <Question chapter=\"Chapter 1 - URLify\"\n                 question=\"Write a method to replace all spaces in a string with %20 You may assume that the string\n                 has sufficient space at the end to hold the additional characters, and that you are given the true\n                length of the string.\"\n                />\n                <input className=\"form-control\" \n                type=\"text\" placeholder=\"Enter text with spaces\"\n                onChange={this.onTextChange}\n                ></input>\n                <div>\n                    <strong>Output</strong>\n                    <p>{this.state.output && this.state.output}</p>\n                </div>\n                <Code code={code} />\n            </div>\n        );\n    }\n\n}\n\nexport default URLify;","import React, { Component } from 'react';\nimport Question from '../UI/question';\nimport Code from '../UI/code';\n\n\nclass PalindromePermutation extends Component{\n\n    state = {\n        message:\"\"\n    }\n\n    onTextChange = (e) => {\n\n        let result = this.palindromePermutation(e.target.value.toLowerCase());\n\n        if(result){\n            this.setState({\n                message:\"String is a palindrome\"\n            });\n        }\n        else{\n            this.setState({\n                message:\"String is not a palindrome\"\n            });\n        }\n    }\n\n    palindromePermutation = (text) => {\n\n        let charMap = {};\n\n        for(const c of text){\n\n            if(!charMap[c]){\n                charMap[c] = 1\n            }\n            else{\n                charMap[c]++;\n            }\n        }\n        let checkOdd = false;\n\n        for(let key in charMap){\n            \n            if(charMap[key]%2===1){\n                if(checkOdd){\n                    return false;\n                }\n                checkOdd = true;\n            }\n        }\n        return true;\n    }\n\n    render(){\n\n        const code = String.raw`\n        palindromePermutation = (text) => {\n\n            let charMap = {};\n    \n            for(const c of text){\n    \n                if(!charMap[c]){\n                    charMap[c] = 1\n                }\n                else{\n                    charMap[c]++;\n                }\n            }\n            let checkOdd = false;\n    \n            for(let key in charMap){\n                \n                if(charMap[key]%2===1){\n                    if(checkOdd){\n                        return false;\n                    }\n                    checkOdd = true;\n                }\n            }\n            return true;\n        }\n        `;\n\n        return(<div>\n            <Question chapter=\"Palindrome Permutation\"\n            question=\"Given a string, write a function to check if a permutation is a palindrome.\n            A palindrome is a word or phrase that is same forwards and backwards. A permutation is a rerragnement\n             of letters. The palindrome does not to be limited to just dictionary words.\n            \"/>\n            {\n                    this.state.message && \n                    <div className=\"alert alert-primary\">\n                        {this.state.message}\n                    </div>\n            }\n            <input className=\"form-control\" \n                type=\"text\" placeholder=\"Enter text\"\n                onChange={this.onTextChange}\n            ></input>\n\n            <Code code={code}/>\n\n\n\n        </div>)\n    }\n\n}\n\nexport default PalindromePermutation;","import React, {Component} from 'react';\nimport Question from '../UI/question';\nimport Code from '../UI/code';\n\nclass OneWay extends Component {\n\n    state = {\n        string1: \"\",\n        string2: \"\",\n        message:\"\"\n    }\n\n    successMessage = \"Two strings are one (or zero) edit away of each other\";\n    errorMessage = \"Two strings are not one edit away of each other\";\n\n    onString1Change = (e) => {\n\n        let string1 = e.target.value;\n\n        this.setState({\n            string1: string1\n        });\n        let result = this.oneWay(string1, this.state.string2);\n\n        if(result === true){\n            this.setState({\n                message: this.successMessage\n            })\n        }\n        else {\n            this.setState({\n                message: this.errorMessage\n            })\n        }\n\n    }\n\n    onString2Change = (e) => {\n\n        let string2 = e.target.value;\n\n        this.setState({\n            string2: string2\n        });\n        let result = this.oneWay(this.state.string1, string2);\n\n        if(result === true){\n            this.setState({\n                message: this.successMessage\n            })\n        }\n        else {\n            this.setState({\n                message: this.errorMessage\n            })\n        }\n\n    }\n\n\n    oneWay=(string1, string2) => {\n\n        const string1Length = string1.length;\n        const string2Length = string2.length;\n\n        if(string1Length === string2Length){\n           return this.oneEditReplace(string1, string2);\n        }\n        \n        if(string1Length+1 === string2Length) {\n            return this.oneEditInsert(string1, string2);\n        }\n\n        if(string1Length === string2Length+1){\n            return this.oneEditInsert(string2, string1);\n        }\n\n        return false;\n    }\n\n    oneEditReplace = (string1, string2) => {\n        let foundDiff= false;\n        for(let i = 0; i<string1.length; i++){\n            if(string1[i]!==string2[i]){\n                if(foundDiff){\n                    return false;\n                }\n                foundDiff = true;\n            }\n        }\n        return true;\n    }\n\n    oneEditInsert = (string1, string2) => {\n        let i=0;\n        let j=0;\n        while(i<string1.length && j<string2.length){\n\n            if(string1[i]!==string2[j]){\n                if(i!==j){\n                    return false;\n                }\n                else{\n                    j++;\n                }\n            }\n            else {\n                i++;j++;\n            }\n        }\n        return true;\n    }\n\n    render(){\n\n        const code = String.raw`\n        oneWay=(string1, string2) => {\n\n            const string1Length = string1.length;\n            const string2Length = string2.length;\n    \n            if(string1Length === string2Length){\n               return this.oneEditReplace(string1, string2);\n            }\n            \n            if(string1Length+1 === string2Length) {\n                return this.oneEditInsert(string1, string2);\n            }\n    \n            if(string1Length === string2Length+1){\n                return this.oneEditInsert(string2, string1);\n            }\n    \n            return false;\n        }\n    \n        oneEditReplace = (string1, string2) => {\n            let foundDiff= false;\n            for(let i = 0; i<string1.length; i++){\n                if(string1[i]!==string2[i]){\n                    if(foundDiff){\n                        return false;\n                    }\n                    foundDiff = true;\n                }\n            }\n            return true;\n        }\n    \n        oneEditInsert = (string1, string2) => {\n            let i=0;\n            let j=0;\n            while(i<string1.length && j<string2.length){\n    \n                if(string1[i]!==string2[j]){\n                    if(i!==j){\n                        return false;\n                    }\n                    else{\n                        j++;\n                    }\n                }\n                else {\n                    i++;j++;\n                }\n            }\n            return true;\n        }\n        `;\n\n        return(\n            <div>\n\n                <Question chapter=\"One Way\"\n                    question=\"There are three types of edits that can be performed on the strings: \n                    insert a character, remove a character, or replace a character. \n                    Given two strings, write a function to check if they are one edit (or zero edits) away.\n                    \"/>\n                    \n                <p>Example</p>\n                <p>pale, ple -> true</p>\n                <p>pales, pale -> true</p>\n                <p>pale, bake -> false</p>\n                {\n                    this.state.message && \n                    <div className=\"alert alert-primary\">\n                        {this.state.message}\n                    </div>\n                }\n                <div className=\"form-group\">\n                <input className=\"form-control\" \n                    type=\"text\" placeholder=\"Enter String1\"\n                    value={this.state.string1}\n                    onChange={this.onString1Change}\n                ></input>\n                </div>\n                <div className=\"form-group\">\n                <input className=\"form-control\" \n                    type=\"text\" placeholder=\"Enter String2\"\n                    value={this.state.string2}\n                    onChange={this.onString2Change}\n                  ></input>\n                </div>\n                <Code code={code}/>\n            </div>\n        );\n    }\n\n}\n\nexport default OneWay;","import React, {Component} from 'react';\nimport Question from '../UI/question';\nimport Code from '../UI/code';\n\nclass StringCompression extends Component{\n\n    state = {\n        string:\"\",\n        compressedString:\"\"\n    }\n\n    ontextChange = (e) => {\n\n        this.setState({\n            string:e.target.value,\n            compressedString: this.compressString(e.target.value)\n        });\n    }\n\n    compressString = (text) => {\n\n        let outputString = \"\";\n        let tempCount=1;\n        for(let i = 0; i<text.length; i++){\n\n            if(text[i]===text[i+1]){\n                tempCount++;\n            }\n            else{\n                if(tempCount>1){\n                    outputString+=text[i]+tempCount;\n                    tempCount=1;\n                }\n                else{\n                    outputString+=text[i];\n                }\n                \n            }\n            if(outputString.length>=text.length){\n                return text;\n            }\n        }\n        return outputString;\n    }\n\n    render(){\n        const code=String.raw`\n        compressString = (text) => {\n\n            let outputString = \"\";\n            let tempCount=1;\n            for(let i = 0; i<text.length; i++){\n    \n                if(text[i]===text[i+1]){\n                    tempCount++;\n                }\n                else{\n                    if(tempCount>1){\n                        outputString+=text[i]+tempCount;\n                        tempCount=1;\n                    }\n                    else{\n                        outputString+=text[i];\n                    }\n                    \n                }\n                if(outputString.length>=text.length){\n                    return text;\n                }\n            }\n            return outputString;\n        }  \n        `;\n        return(<div>\n            <Question chapter=\"String Compression\"\n            question='Implement a method to perform basic string compression using the counts of \n            repeated characters. For example, the string aabcccccaaa would become a2b1c5a3. \n            If the \"compressed\" string would not become smaller than the original string, \n            your method should return the original string. \n            You can assume the string has only uppercase and lowercase letters (a - z).'/>\n            <div className=\"form-group\">\n                <input className=\"form-control\"\n                onChange={this.ontextChange}\n                value={this.state.string}\n                placeholder=\"Enter string to compress\"/>\n            </div>\n            <div className=\"form-group\">\n                <strong>Compressed string</strong>\n                <p>{this.state.compressedString}</p>\n            </div>\n            <Code code={code}/>\n        </div>);\n    }\n}\n\nexport default StringCompression;","import React, {Component} from 'react';\nimport Question from '../UI/question';\nimport Code from '../UI/code';\n\nclass RotateMatrix extends Component{\n\n    state={\n        imageArray: [[1,2,3],[4,5,6],[7,8,9]]\n    }\n    \n\n    onAntiClockWiseClick = (e) => {\n        this.setState({\n            imageArray: this.rotateAntiClockWise(this.state.imageArray)\n        })\n    }\n\n    onClockWiseClick = (e) => {\n        this.setState({\n            imageArray: this.rotateClockWise(this.state.imageArray)\n        })\n    }\n\n    rotateAntiClockWise = (array) => {\n\n        const rows =array.length;\n        const col  = rows;\n        let newArray = [];\n        for(let i=0;i<rows;i++){\n            newArray[i]=[]\n        }\n\n        for(let i = 0; i<rows;i++){\n            for(let j=0; j<col;j++){\n                newArray[rows-1-j][i] = array[i][j];\n            }\n        }\n        return newArray\n    }\n\n    rotateClockWise = (array) => {\n\n        const rows =array.length;\n        const col  = rows;\n        let newArray = [];\n        for(let i=0;i<rows;i++){\n            newArray[i]=[]\n        }\n\n        for(let i = 0; i<rows;i++){\n            for(let j=0; j<col;j++){\n                newArray[j][rows-1-i] = array[i][j];\n            }\n        }\n        return newArray\n\n    }\n\n    render(){\n\n        const code = String.raw`\n        rotateAntiClockWise = (array) => {\n\n            const rows =array.length;\n            const col  = rows;\n            let newArray = [];\n            for(let i=0;i<rows;i++){\n                newArray[i]=[]\n            }\n    \n            for(let i = 0; i<rows;i++){\n                for(let j=0; j<col;j++){\n                    newArray[rows-1-j][i] = array[i][j];\n                }\n            }\n            return newArray\n        }\n    \n        rotateClockWise = (array) => {\n    \n            const rows =array.length;\n            const col  = rows;\n            let newArray = [];\n            for(let i=0;i<rows;i++){\n                newArray[i]=[]\n            }\n    \n            for(let i = 0; i<rows;i++){\n                for(let j=0; j<col;j++){\n                    newArray[j][rows-1-i] = array[i][j];\n                }\n            }\n            return newArray\n    \n        }\n        \n        `;\n\n        return(<div>\n            <Question chapter=\"Rotate Matrix\"\n            question=\"Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees. Can you do this in place?\"\n            />\n            <p>Image Array</p>\n            <table className=\"table table-bordered\">\n                <tbody>\n            {\n                this.state.imageArray.map((row,index)=>{\n\n                    return (\n                        <tr key={index}>\n                    {row.map((cell, index)=>{\n\n                        return(<td key={index}>{cell}</td>);\n\n                    })}\n                    </tr>\n                    )\n                })\n            }\n            </tbody>\n            </table>\n            <div className=\"form-group\">\n                <button className=\"btn btn-primary\" onClick={this.onClockWiseClick}>Rotate Clockwise</button>\n                <button className=\"btn btn-primary\" onClick={this.onAntiClockWiseClick}>Rotate Anti-Clockwise</button>\n            </div>\n            <Code code={code}/>\n        </div>);\n    }\n}\n\nexport default RotateMatrix;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Question1 from './components/chapter1/question1';\nimport Header from './components/UI/header';\nimport SideBar from './components/UI/sidebar';\nimport CheckPermutation from './components/chapter1/checkPermutation';\nimport URLify from './components/chapter1/urlify';\nimport PalindromePermutation from './components/chapter1/palindromePermutation';\nimport OneWay from './components/chapter1/oneWay';\nimport StringCompression from './components/chapter1/stringCompression';\nimport RotateMatrix from './components/chapter1/rotateMatrix';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n      <div>\n        <Header/>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <SideBar/>\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\n            <div className=\"container\">\n              <Route path=\"/\" exact component={CheckPermutation} />\n              <Route path=\"/isunique/\" component={Question1}/>\n              <Route path=\"/checkpermutation/\" component={CheckPermutation} />\n              <Route path=\"/urlify\" component={URLify}/>\n              <Route path=\"/palindromepermutation\" component={PalindromePermutation}/>\n              <Route path=\"/oneway\" component={OneWay}/>\n              <Route path=\"/stringcompression\" component={StringCompression}/>\n              <Route path=\"/rotatematrix\" component={RotateMatrix}/>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}